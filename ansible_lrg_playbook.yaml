---
#ansible-playbook ansible_lrg_playbook.yaml -i ansible_lrg_inventory.yaml
#
#Eventually:
#ansible-playbook ansible_lrg_playbook.yaml -i ansible_lrg_inventory.yaml --ask-vault-pass

- hosts: localhost
  gather_facts: no
  tasks:

    - name: Template the Things
      template:
          dest: ./output/resume.md # required. Location to render the template to on the remote machine.
          src: ./templates/resume_md.j2 # required. Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or absolute path.
          #force: yes # not required. the default is C(yes), which will replace the remote file when contents are different than the source.  If C(no), the file will only be transferred if the destination does not exist.
          #trim_blocks: yes # not required. If this is set to True the first newline after a block is removed (block, not variable tag!).
          #variable_start_string: {{ # not required. The string marking the beginning of a print statement.
          #variable_end_string: }} # not required. The string marking the end of a print statement.
          #owner: undefined # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
          #follow: no # not required. This flag indicates that filesystem links in the destination, if they exist, should be followed.,Previous to Ansible 2.4, this was hardcoded as C(yes).
          #lstrip_blocks: no # not required. If this is set to True leading spaces and tabs are stripped from the start of a line to a block. Setting this option to True requires Jinja2 version >=2.7.
          #group: undefined # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
          #unsafe_writes: no # not required. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.,This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
          #setype: undefined # not required. Type part of SELinux file context, C(_default) feature works as for I(seuser).
          #serole: undefined # not required. Role part of SELinux file context, C(_default) feature works as for I(seuser).
          #selevel: s0 # not required. Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser).
          ##block_end_string: %} # not required. The string marking the end of a block.
          ##block_start_string: {% # not required. The string marking the beginning of a block.
          #validate: undefined # not required. The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work.
          #output_encoding: utf-8 # not required. Overrides the encoding used to write the template file defined by C(dest).,It defaults to C('utf-8'), but any encoding supported by python can be used.,The source template file must always be encoded using C('utf-8'), for homogeneity.
          #seuser: undefined # not required. User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.
          #newline_sequence: \n # not required. choices: \n;\r;\r\n. Specify the newline sequence to use for templating files.
          #mode: undefined # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers.  You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.  Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.  As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).  As of version 2.6, the mode may also be the special string C(preserve).  C(preserve) means that the file will be given the same permissions as the source file.
          #attributes: undefined # not required. Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).,C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
          #backup: no # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.: